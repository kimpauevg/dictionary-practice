[
  {
    "id": "1",
    "name":  "Микросервисная архитектура",
    "meaning": "вариант сервис-ориентированной архитектуры программного обеспечения, направленный на взаимодействие насколько это возможно небольших, слабо связанных и легко изменяемых модулей — микросервисов, получивший распространение в середине 2010-х годов в связи с развитием практик гибкой разработки и DevOps"
  },
  {
    "id": "2",
    "name":  "Микрофронтенды",
    "meaning": "структура архитектуры кода фронтенд-приложений, основанная на микросервисной архитектуре"
  },
  {
    "id": "4",
    "name":  "Интеграция во время сборки",
    "meaning": "это способ, при котором каждый микрофронтенд создается отдельно, обычно с использованием разных технологических стеков или фреймворков. После сборки микрофронтенды интегрируются в единое приложение в процессе сборки. Этого можно достичь с помощью таких методов, как SSI или создание статического сайта, когда конечное приложение собирается и развертывается как единый артефакт"
  },
  {
    "id": "5",
    "name":  "Интеграция на стороне клиента",
    "meaning": "подход, включающий в себя загрузку и рендеринг микрофронтендов на стороне клиента, обычно с использованием фреймворков или библиотек JavaScript. Каждый микрофронтенд разрабатывается как отдельное приложение, предоставляющее определенный API или интерфейс для связи с основным приложением оболочки. Приложение-оболочка динамически загружает и интегрирует микрофронтенды во время выполнения"
  },
  {
    "id": "6",
    "name":  "Периферийное включение",
    "meaning": "подход, при котором сборка контента микрофронтендов происходила бы на периферийном сервере. Сервер перехватывает запросы и динамически объединяет ответы от разных микрофронтендов, представляя клиенту единое представление. Такой подход позволяет независимо разрабатывать и развертывать микрофронтенды, перенося логику интеграции на сервер"
  },
  {
    "id": "7",
    "name":  "Периферийный сервер",
    "meaning": "это сервер, который выполняет задачу как можно ближе к конечным потребителям. Использование данного подхода позволяет устранить или сильно уменьшить проблемы, связанные с задержками или производительностью облачных провайдеров и даёт более высокий уровень надежности, скорости и безопасности"
  },
  {
    "id": "8",
    "name":  "Iframe",
    "meaning": "это тег, позволяющий загружать в область с заданными размерами содержимое, указанное в параметрах тега как источник"
  },
  {
    "id": "9",
    "name":  "Интеграция с помощью iframe",
    "meaning": "способ интеграции, при котором каждый микрофронтенд рассматривается как независимое приложение и встраивается в iframe на главной странице приложения. Каждый микрофронтенд разрабатывается и развертывается отдельно, а связь между основным приложением и микрофронтендом происходит через сообщения, отправляемые через API postMessage"
  },
  {
    "id": "10",
    "name":  "Веб-компоненты",
    "meaning": "набор из нескольких технологий, благодаря которым появляется возможность создавать переиспользуемые элементы"
  },
  {
    "id": "11",
    "name":  "Интеграция с помощью веб-компонентов",
    "meaning": "подход, предполагающий создание каждого микрофронтенда как автономного веб-компонента. Компоненты можно разрабатывать и тестировать независимо друг от друга, а затем объединять в рамках более крупного приложения. Веб-компоненты можно использовать с любым фреймворком или библиотекой или даже без какого-либо конкретного фреймворка"
  }
]